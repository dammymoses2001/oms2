 // useEffect(() => {
    //     if (dataOrders && dataOrders.hasOwnProperty("order")) {
    //         let now = new Date();

    //         // Yesterday metrics

    //         const y1 = new Date(now.valueOf() - 1000 * 60 * 60 * 24);
    //         const y2 = new Date(now.valueOf() - 1000 * 60 * 60 * 24 * 2);

    //         const [y_year1, y_year2] = [y1.getFullYear(), y2.getFullYear()];
    //         const [y_month1, y_month2] = [y1.getMonth() + 1, y2.getMonth() + 1];
    //         const [y_date1, y_date2] = [y1.getDate(), y2.getDate()];

    //         // 1 day ago
    //         const y_metrics1 = dataOrders?.order?.filter(function (o) {
    //             let o_date = moment(o.createdAt).format("YYYY-M-D");
    //             let o_date_arr = o_date.split("-");

    //             return (
    //                 parseInt(o_date_arr[0]) === y_year1 &&
    //                 parseInt(o_date_arr[1] === y_month1) &&
    //                 parseInt(o_date_arr[2] === y_date1)
    //             );
    //         });

    //         // 2 days ago
    //         const y_metrics2 = dataOrders?.order?.filter(function (o) {
    //             let o_date = moment(o.createdAt).format("YYYY-M-D");
    //             let o_date_arr = o_date.split("-");

    //             return (
    //                 parseInt(o_date_arr[0]) === y_year2 &&
    //                 parseInt(o_date_arr[1] === y_month2) &&
    //                 parseInt(o_date_arr[2] === y_date2)
    //             );
    //         });

    //         let y_totalSales1 = y_metrics1
    //             .map((o) => o.total)
    //             .reduce((a, b) => parseFloat(a) + parseFloat(b), 0);

    //         let y_totalSales2 = y_metrics2
    //             .map((o) => o.total)
    //             .reduce((a, b) => parseFloat(a) + parseFloat(b), 0);

    //         let y_collected_metrics = y_metrics1.filter(
    //             (o) => o?.PaymentStatus?.toLowerCase() === "paid"
    //         );

    //         let y_collected = y_collected_metrics
    //             .map((o) => o.total)
    //             .reduce((a, b) => parseFloat(a) + parseFloat(b), 0);

    //         let y_growth =
    //             ((y_totalSales1 - y_totalSales2) / y_totalSales2) * 100 || 0;

    //         setYesterdayMetrics([
    //             formatMoney(y_totalSales1) || "0.00",
    //             formatMoney(y_collected) || "0.00",
    //             to2DecPlaces(y_growth) + "%"
    //         ]);
    //     }
    // }, [dataOrders]);

    // useEffect(() => {
    //     if (dataOrders && dataOrders.hasOwnProperty("order")) {
    //         let now = new Date();

    //         // Last week metrics

    //         let w1, w2, w3, w4;

    //         let currDay = now.getDay();

    //         // If the day is not the first day of the week, that is `0` - Sunday.
    //         if (currDay > 0) {
    //             w1 = new Date(now.valueOf());
    //             w2 = new Date(now.valueOf() - 1000 * 60 * 60 * 24 * currDay);
    //         } else {
    //             w1 = w2 = Date(now.valueOf());
    //         }

    //         // New Date from previous week before last week
    //         w3 = new Date(w2.valueOf() - 1000 * 60 * 60 * 24 * 1);
    //         w4 = new Date(w2.valueOf() - 1000 * 60 * 60 * 24 * 7);

    //         const [w_year1, w_year2] = [w1.getFullYear(), w2.getFullYear()];
    //         const [w_month1, w_month2] = [w1.getMonth() + 1, w2.getMonth() + 1];
    //         const [w_date1, w_date2] = [w1.getDate(), w2.getDate()];

    //         const [w_year3, w_year4] = [w3.getFullYear(), w4.getFullYear()];
    //         const [w_month3, w_month4] = [w3.getMonth() + 1, w4.getMonth() + 1];
    //         const [w_date3, w_date4] = [w3.getDate(), w4.getDate()];

    //         // Current week
    //         const w_metrics1 = dataOrders?.order?.filter(function (o) {
    //             let o_date = moment(o.createdAt).format("YYYY-M-D");
    //             let o_date_arr = o_date.split("-");

    //             let o_y = parseInt(o_date_arr[0]);
    //             let o_m = parseInt(o_date_arr[1]);
    //             let o_d = parseInt(o_date_arr[2]);

    //             return (
    //                 o_y >= w_year2 &&
    //                 o_y <= w_year1 &&
    //                 o_m >= w_month2 &&
    //                 o_m <= w_month1 &&
    //                 o_d >= w_date2 &&
    //                 o_d <= w_date1
    //             );
    //         });

    //         // Last week
    //         const w_metrics2 = dataOrders?.order?.filter(function (o) {
    //             let o_date = moment(o.createdAt).format("YYYY-M-D");
    //             let o_date_arr = o_date.split("-");

    //             let o_y = parseInt(o_date_arr[0]);
    //             let o_m = parseInt(o_date_arr[1]);
    //             let o_d = parseInt(o_date_arr[2]);

    //             return (
    //                 o_y >= w_year4 &&
    //                 o_y <= w_year3 &&
    //                 o_m >= w_month4 &&
    //                 o_m <= w_month3 &&
    //                 o_d >= w_date4 &&
    //                 o_d <= w_date3
    //             );
    //         });

    //         let w_totalSales1 = w_metrics1
    //             .map((o) => o.total)
    //             .reduce((a, b) => parseFloat(a) + parseFloat(b), 0);

    //         let w_totalSales2 = w_metrics2
    //             .map((o) => o.total)
    //             .reduce((a, b) => parseFloat(a) + parseFloat(b), 0);

    //         let w_growth =
    //             ((w_totalSales1 - w_totalSales2) / w_totalSales2) * 100 || 0;

    //         let w_collected_metrics = w_metrics1.filter(
    //             (o) => o?.PaymentStatus?.toLowerCase() === "paid"
    //         );

    //         console.log("w_metrics", w_metrics1, w_metrics2);

    //         let w_collected = w_collected_metrics
    //             .map((o) => o.total)
    //             .reduce((a, b) => parseFloat(a) + parseFloat(b), 0);

    //         setWeekMetrics([
    //             formatMoney(w_totalSales1) || "0.00",
    //             formatMoney(w_collected) || "0.00",
    //             to2DecPlaces(w_growth) + "%"
    //         ]);
    //     }
    // }, [dataOrders]);

    // useEffect(() => {
    //     if (dataOrders && dataOrders.hasOwnProperty("order")) {
    //         let now = new Date();

    //         // Last week metrics

    //         let m1, m2, m3, m4;

    //         let currDate = now.getDate();

    //         // If the day is not the first day of the month.
    //         // `currDate - 1` because it is not zero-offset.
    //         if (currDate > 0) {
    //             m1 = new Date(now.valueOf());
    //             m2 = new Date(
    //                 now.valueOf() - 1000 * 60 * 60 * 24 * (currDate - 1)
    //             );
    //         } else {
    //             m1 = m2 = Date(now.valueOf());
    //         }

    //         // New Date from previous month before last month
    //         m3 = new Date();
    //         m3.setDate(0);

    //         m4 = new Date();
    //         m4.setDate(0);
    //         m4.setDate(1);
    //         // prevMonthDate.setDate(1);
    //         // prevMonthDate.setHours(0, 0, 0, 0);

    //         // // w3 = new Date(w2.valueOf() - 1000 * 60)

    //         const [m_year1, m_year2] = [m1.getFullYear(), m2.getFullYear()];
    //         const [m_month1, m_month2] = [m1.getMonth() + 1, m2.getMonth() + 1];
    //         const [m_date1, m_date2] = [m1.getDate(), m2.getDate()];

    //         const [m_year3, m_year4] = [m3.getFullYear(), m4.getFullYear()];
    //         const [m_month3, m_month4] = [m3.getMonth() + 1, m4.getMonth() + 1];
    //         const [m_date3, m_date4] = [m3.getDate(), m4.getDate()];

    //         // Current month
    //         const m_metrics1 = dataOrders?.order?.filter(function (o) {
    //             let o_date = moment(o.createdAt).format("YYYY-M-D");
    //             let o_date_arr = o_date.split("-");

    //             let o_y = parseInt(o_date_arr[0]);
    //             let o_m = parseInt(o_date_arr[1]);
    //             let o_d = parseInt(o_date_arr[2]);

    //             return (
    //                 o_y >= m_year2 &&
    //                 o_y <= m_year1 &&
    //                 o_m >= m_month2 &&
    //                 o_m <= m_month1 &&
    //                 o_d >= m_date2 &&
    //                 o_d <= m_date1
    //             );
    //         });

    //         // Last month
    //         const m_metrics2 = dataOrders?.order?.filter(function (o) {
    //             let o_date = moment(o.createdAt).format("YYYY-M-D");
    //             let o_date_arr = o_date.split("-");

    //             let o_y = parseInt(o_date_arr[0]);
    //             let o_m = parseInt(o_date_arr[1]);
    //             let o_d = parseInt(o_date_arr[2]);

    //             return (
    //                 o_y >= m_year4 &&
    //                 o_y <= m_year3 &&
    //                 o_m >= m_month4 &&
    //                 o_m <= m_month3 &&
    //                 o_d >= m_date4 &&
    //                 o_d <= m_date3
    //             );
    //         });

    //         let m_totalSales1 = m_metrics1
    //             .map((o) => o.total)
    //             .reduce((a, b) => parseFloat(a) + parseFloat(b), 0);

    //         let m_totalSales2 = m_metrics2
    //             .map((o) => o.total)
    //             .reduce((a, b) => parseFloat(a) + parseFloat(b), 0);

    //         let m_collected_metrics = m_metrics1.filter(
    //             (o) => o?.PaymentStatus?.toLowerCase() === "paid"
    //         );

    //         let m_collected = m_collected_metrics
    //             .map((o) => o.total)
    //             .reduce((a, b) => parseFloat(a) + parseFloat(b), 0);

    //         let m_growth =
    //             ((m_totalSales1 - m_totalSales2) / m_totalSales2) * 100 || 0;

    //         setMonthMetrics([
    //             formatMoney(m_totalSales1) || "0.00",
    //             formatMoney(m_collected) || "0.00",
    //             to2DecPlaces(m_growth) + "%"
    //         ]);
    //     }
    // }, [dataOrders]);

    //console.log(getUserProductList?.products,'MapMertics')

    // const startDate = '167308915';
    // const endDate = '1678128831';
    //     const [startDate, setStartDate] = useState('1646611200');
    //   const [endDate, setEndDate] = useState('1678147200');
